// <auto-generated />
using System;
using ELO.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ELO.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ELO.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("ELO.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Last");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime>("MemberSince");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImageUrl");

                    b.Property<int>("Rating");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ELO.Models.Arrival", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Caleta");

                    b.Property<int>("ComunaID");

                    b.Property<DateTime>("Date");

                    b.Property<int>("Kg");

                    b.Property<int>("Species");

                    b.HasKey("ID");

                    b.HasIndex("ComunaID");

                    b.ToTable("Arrival");
                });

            modelBuilder.Entity("ELO.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Last");

                    b.Property<string>("Name");

                    b.Property<int>("PublicationId");

                    b.HasKey("Id");

                    b.HasIndex("PublicationId");

                    b.ToTable("Author");
                });

            modelBuilder.Entity("ELO.Models.Centre", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Acronym");

                    b.Property<string>("Address");

                    b.Property<bool?>("Certificable");

                    b.Property<int>("CompanyId");

                    b.Property<int>("ComunaId");

                    b.Property<int?>("CuerpoAgua");

                    b.Property<int?>("FolioRNA");

                    b.Property<string>("Name");

                    b.Property<int>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ComunaId");

                    b.ToTable("Centre");
                });

            modelBuilder.Entity("ELO.Models.Company", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Acronym");

                    b.Property<string>("Address");

                    b.Property<string>("BsnssName");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("ELO.Models.Comuna", b =>
                {
                    b.Property<int>("ID");

                    b.Property<int>("CS");

                    b.Property<int>("DE");

                    b.Property<string>("Name");

                    b.Property<int>("ProvinciaID");

                    b.HasKey("ID");

                    b.HasIndex("ProvinciaID");

                    b.ToTable("Comuna");
                });

            modelBuilder.Entity("ELO.Models.Continent", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("ISO");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Continent");
                });

            modelBuilder.Entity("ELO.Models.Coordinate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CentreId");

                    b.Property<int?>("ComunaID");

                    b.Property<int?>("CountryID");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int?>("ProvinciaID");

                    b.Property<int?>("RegionID");

                    b.Property<string>("StationID");

                    b.Property<int>("Vertex");

                    b.HasKey("ID");

                    b.HasIndex("CentreId");

                    b.HasIndex("ComunaID");

                    b.HasIndex("CountryID");

                    b.HasIndex("ProvinciaID");

                    b.HasIndex("RegionID");

                    b.HasIndex("StationID");

                    b.ToTable("Coordinate");
                });

            modelBuilder.Entity("ELO.Models.Country", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Capital");

                    b.Property<int>("ContinentID");

                    b.Property<string>("ISO2");

                    b.Property<string>("ISO3");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.HasIndex("ContinentID");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("ELO.Models.Export", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryID");

                    b.Property<DateTime>("Date");

                    b.Property<int>("FOB");

                    b.Property<int>("Kg");

                    b.Property<int>("Processing");

                    b.Property<int>("RegionID");

                    b.Property<int>("Species");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("RegionID");

                    b.ToTable("Export");
                });

            modelBuilder.Entity("ELO.Models.Provincia", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("Name");

                    b.Property<int>("Population");

                    b.Property<int>("RegionID");

                    b.Property<int>("Surface");

                    b.HasKey("ID");

                    b.HasIndex("RegionID");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("ELO.Models.Publication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr");

                    b.Property<string>("Abstract");

                    b.Property<int>("CompanyId");

                    b.Property<string>("DOI");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Journal");

                    b.Property<string>("Source");

                    b.Property<string>("Title");

                    b.Property<int>("Typep");

                    b.Property<string>("Uri");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Publication");
                });

            modelBuilder.Entity("ELO.Models.Region", b =>
                {
                    b.Property<int>("ID");

                    b.Property<string>("MapCode");

                    b.Property<string>("Name");

                    b.Property<int>("Pop2002");

                    b.Property<int>("Pop2010");

                    b.Property<int>("Surface");

                    b.HasKey("ID");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("ELO.Models.Station", b =>
                {
                    b.Property<string>("ID");

                    b.Property<string>("Area");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<string>("Name");

                    b.Property<int>("RegionID");

                    b.HasKey("ID");

                    b.HasIndex("RegionID");

                    b.ToTable("Station");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppRoleId");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ELO.Models.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("RoleAssigner");

                    b.ToTable("AppUserRole");

                    b.HasDiscriminator().HasValue("AppUserRole");
                });

            modelBuilder.Entity("ELO.Models.Arrival", b =>
                {
                    b.HasOne("ELO.Models.Comuna", "Comuna")
                        .WithMany("Arrivals")
                        .HasForeignKey("ComunaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ELO.Models.Author", b =>
                {
                    b.HasOne("ELO.Models.Publication", "Publication")
                        .WithMany("Authors")
                        .HasForeignKey("PublicationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ELO.Models.Centre", b =>
                {
                    b.HasOne("ELO.Models.Company", "Company")
                        .WithMany("Centres")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ELO.Models.Comuna", "Comuna")
                        .WithMany()
                        .HasForeignKey("ComunaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ELO.Models.Comuna", b =>
                {
                    b.HasOne("ELO.Models.Provincia", "Provincia")
                        .WithMany("Comunas")
                        .HasForeignKey("ProvinciaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ELO.Models.Coordinate", b =>
                {
                    b.HasOne("ELO.Models.Centre")
                        .WithMany("Coordinates")
                        .HasForeignKey("CentreId");

                    b.HasOne("ELO.Models.Comuna", "Comuna")
                        .WithMany("Coordinates")
                        .HasForeignKey("ComunaID");

                    b.HasOne("ELO.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryID");

                    b.HasOne("ELO.Models.Provincia", "Provincia")
                        .WithMany("Coordinates")
                        .HasForeignKey("ProvinciaID");

                    b.HasOne("ELO.Models.Region", "Region")
                        .WithMany("Coordinates")
                        .HasForeignKey("RegionID");

                    b.HasOne("ELO.Models.Station", "Station")
                        .WithMany("Coordinates")
                        .HasForeignKey("StationID");
                });

            modelBuilder.Entity("ELO.Models.Country", b =>
                {
                    b.HasOne("ELO.Models.Continent", "Continent")
                        .WithMany("Countries")
                        .HasForeignKey("ContinentID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ELO.Models.Export", b =>
                {
                    b.HasOne("ELO.Models.Country", "Country")
                        .WithMany("Exports")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ELO.Models.Region", "Region")
                        .WithMany("Exports")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ELO.Models.Provincia", b =>
                {
                    b.HasOne("ELO.Models.Region", "Region")
                        .WithMany("Provincias")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ELO.Models.Publication", b =>
                {
                    b.HasOne("ELO.Models.Company", "Company")
                        .WithMany("Publications")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ELO.Models.Station", b =>
                {
                    b.HasOne("ELO.Models.Region", "Region")
                        .WithMany("Stations")
                        .HasForeignKey("RegionID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ELO.Models.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ELO.Models.AppRole")
                        .WithMany("Claims")
                        .HasForeignKey("AppRoleId");

                    b.HasOne("ELO.Models.AppUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ELO.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ELO.Models.AppRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ELO.Models.AppUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ELO.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
