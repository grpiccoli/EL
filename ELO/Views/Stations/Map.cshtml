@model IEnumerable<ELO.Models.Station>

@{
    ViewData["Title"] = "Mapa Productores";
}

<h1>@ViewData["Title"]</h1>

<dd>
    <div id="map" style="height: 450px;"></div>
</dd>

@section Scripts {
    <script src="https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js"></script>
            <script async defer type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCkBD_nY7LaeVohfyIt-M2a2BuIhuy-51c&language=es&region=CL"></script>
            <script type="text/javascript">
        window.onload = function initMap() {
            if (!google.maps.Polygon.prototype.getBounds) {
                google.maps.Polygon.prototype.getBounds = function () {
                    var bounds = new google.maps.LatLngBounds();
                    var paths = this.getPaths();
                    var path;
                    for (var i = 0; i < paths.getLength() ; i++) {
                        path = paths.getAt(i);
                        for (var ii = 0; ii < path.getLength() ; ii++) {
                            bounds.extend(path.getAt(ii));
                        }
                    }
                    return bounds;
                }
            }
            var infowindow = new google.maps.InfoWindow({
                size: new google.maps.Size(150, 50)
            });
            var array = [];
            var polygons = [];
            @foreach (var centre in Model)
                {
                    if (centre.Coordinates.Count > 0) {
                        @:polygons.push(@Html.Raw(Json.Serialize(centre.Coordinates.Select(m => new
                        {
                            lat = m.Latitude,
                            lng = m.Longitude
                        }))));
                        @:array.push([@Html.Raw(Json.Serialize(centre.Coordinates.Select(m => new
                        {
                            lat = m.Latitude,
                            lng = m.Longitude,
                            vtx = m.Vertex
                        }))), @Html.Raw(Json.Serialize(centre.ID)), @Html.Raw(Json.Serialize(centre.ID)), @Html.Raw(Json.Serialize(centre.Name)), @Html.Raw(Json.Serialize(centre.Name)) ]);
                        }
                }
            var bounds = new google.maps.LatLngBounds();
            for (var i = 0; i < polygons.length; i++) {
                for (var j = 0; j < polygons[i].length; j++) {
                    bounds.extend(polygons[i][j]);
                }
            }
            var map = new google.maps.Map(document.getElementById('map'), {
                mapTypeId: 'terrain'
            });
            map.fitBounds(bounds);
            map.setCenter(bounds.getCenter());
            var locations = [];
            var markers = [];
            for (var i = 0; i < array.length; i++) {
                array[i][0].sort(function (a, b) { return (a.vtx > b.vtx) ? 1 : ((b.vtx > a.vtx) ? -1 : 0); });
                for (var h = 0; h < array[i][0].length; h++) {
                    delete array[i][0][h].vtx;
                }
                var consessionPolygon = new google.maps.Polygon({
                    paths: array[i][0],
                    strokeColor: '#FF0000',
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: '#FF0000',
                    fillOpacity: 0.35
                });
                locations.push(consessionPolygon.getBounds().getCenter());
                marker = new google.maps.Marker({
                    position: consessionPolygon.getBounds().getCenter(),
                    title: "Código de Concesión : " + String(array[i][1]),
                    //label: String(array[i][1])
                });
                google.maps.event.addListener(marker, 'click', (function (marker, i) {
                    return function () {
                        infowindow.setContent('<div id="content">' +
                            '<div id="siteNotice">' +
                            '</div>' +
                            '<h2 id="firstHeading" class="firstHeading" style="margin-bottom:0px">' +
            //String(array[i][3]) + '</h2>' +
            //String(array[i][4]) +
                            '<h4>Compa&ntilde&iacutea ' + String(array[i][3]) + '</h4>' +
                            'RUT: ' + String(array[i][2]) +
                            '<h4>Concesi&oacuten ' + String(array[i][1]) + '</h4>' +
                            '<div id="bodyContent">' +
                            '<p><b>Localidad : ' + String(array[i][4]) + '</b></p>' +
                            '<a href="/Centres/Details/'+String(array[i][1])+'">Detalles</a>' +
                            '<p align="right">Fuentes: <a target="_blank" href="http://www.sernapesca.cl"><img src="../images/ico/sernapesca.svg" width="100" /></a>' +
                            '<text> | </text><a target="_blank" href="http://139.162.167.71:8081/"><img src="../images/ico/mejillondechile.svg" width="100" /></a>' +
                            '<text> | </text><a target="_blank" href="http://www.subpesca.cl"><img src="../images/ico/subpesca.svg" width="100" /></a>.</p>' +
                            '</div>' +
            '</div>');
                        infowindow.open(map, marker);
                        map.setCenter(marker.getPosition());
                    }
                })(marker, i));
                markers.push(marker);
                consessionPolygon.setMap(map);
            }
            var markerCluster = new MarkerClusterer(map, markers, { imagePath: 'https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m' });
        }
        function polygonCenter(poly) {
            var lowx,
                highx,
                lowy,
                highy,
                lats = [],
                lngs = [],
                vertices = poly.getPath();

            for (var i = 0; i < vertices.length; i++) {
                lngs.push(vertices.getAt(i).lng());
                lats.push(vertices.getAt(i).lat());
            }

            lats.sort();
            lngs.sort();
            lowx = lats[0];
            highx = lats[vertices.length - 1];
            lowy = lngs[0];
            highy = lngs[vertices.length - 1];
            center_x = lowx + ((highx - lowx) / 2);
            center_y = lowy + ((highy - lowy) / 2);
            return (new google.maps.LatLng(center_x, center_y));
        }
            </script>
}